name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log into GitHub Container Registry
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Image
        run: |
          docker build -t ghcr.io/lawne-kea/whoknows -f ./src/Dockerfile.prod ./src
          docker push ghcr.io/lawne-kea/whoknows

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to AWS EC2 instance
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          REPO_NAME: ${{ env.repo_name }}
        run: |
          echo "Deploying with IMAGE_TAG: ${{ env.IMAGE_TAG }}"

          # SSH into AWS EC2 instance
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.AWS_IP }} << EOF
            cd /home/${{ secrets.AWS_USER }}/whoknows || exit

            # log into GitHub Container Registry
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull the compose.prod.yml
            git fetch origin main
            git checkout origin/main -- compose.prod.yml

            # Set environment variables directly in OS (no need for .env)
            echo "Setting environment variables..."
            echo "ENV_DATABASE_USER=${{ secrets.ENV_DATABASE_USER }}"
            export ENV_DATABASE_USER="${{ secrets.ENV_DATABASE_USER }}"
            echo "ENV_DATABASE_PASSWORD=${{ secrets.ENV_DATABASE_PASSWORD }}"
            export ENV_DATABASE_PASSWORD="${{ secrets.ENV_DATABASE_PASSWORD }}"
            echo "ENV_DATABASE_NAME=${{ secrets.ENV_DATABASE_NAME }}"
            export ENV_DATABASE_NAME="${{ secrets.ENV_DATABASE_NAME }}"
            export ENV_DATABASE_SSLMODE="${{ secrets.API_DATABASE_SSL_MODE }}"
            export ENV_DATABASE_SEED="${{ secrets.ENV_DATABASE_SEED }}"
            export ENV_DATABASE_MIGRATE="${{ secrets.ENV_DATABASE_MIGRATE }}"
            export ENV_JWT_SECRET="${{ secrets.ENV_JWT_SECRET }}"
            export ENV_JWT_EXPIRY="${{ secrets.ENV_JWT_EXPIRY }}"
            export ENV_WEATHER_API_KEY="${{ secrets.ENV_WEATHER_API_KEY }}"
            export ENV_MONITOR_IP="${{ secrets.ENV_MONITOR_IP }}"

            # Pull the latest images from GHCR
            echo "Pulling image ghcr.io/lawne-kea/whoknows"
            docker pull ghcr.io/lawne-kea/whoknows

            # Copy the nginx.conf file
            echo "Copying nginx.conf file..."
            git checkout origin/main -- nginx.conf

            # Start Docker services for production
            echo "Starting Docker services for production..."
            docker-compose -f compose.prod.yml down
            docker-compose -f compose.prod.yml up -d
          EOF

      - name: Clean up unused images
        run: |
          docker image prune -f