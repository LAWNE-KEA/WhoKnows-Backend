name: Deploy Go Project to Azure VM

on:
  push:
    branches:
      - main  # Deploy on pushes to main branch
  workflow_dispatch:  # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23  # Set the Go version you need

      # Step 3: Build the Go project
      - name: Build Go application
        working-directory: ./backend
        run: |
          go mod tidy
          go build -o whoknows ./main.go  # Adjust to match your project's entry point

      # Step 4: Add SSH private key
      - name: Add SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.AZURE_VM_IP }}

      # Step 5: Transfer the binary to a temp location on the Azure VM
      - name: Copy binary to Azure VM
        run: |
            scp -o StrictHostKeyChecking=no -r ./backend/whoknows ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }}:/home/${{ secrets.AZURE_VM_USER }}/whoknows_temp
            
      - name: Create systemd service file
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} << 'EOF'
          sudo bash -c 'cat > /etc/systemd/system/whoknows.service << "EOL"
          [Unit]
          Description=My Go Application
          After=network.target
          
          [Service]
          ExecStart=/usr/local/bin/whoknows
          Restart=always
          User=${{ secrets.AZURE_VM_USER }}
          WorkingDirectory=/home/${{ secrets.AZURE_VM_USER }}
          Environment=YOUR_ENV_VAR=value  # Optional environment variables
          
          [Install]
          WantedBy=multi-user.target
          EOL'
          sudo systemctl daemon-reload
          sudo systemctl enable whoknows.service
          EOF
          
      # Step 6: SSH into Azure VM and restart the application
      - name: Stop existing application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} "sudo systemctl stop whoknows.service || true"

      - name: Move binary and set permissions
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} "sudo mv /home/${{ secrets.AZURE_VM_USER }}/whoknows_temp /usr/local/bin/whoknows"
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} "sudo chmod +x /usr/local/bin/whoknows"

      - name: Start the application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} "sudo systemctl start whoknows.service"
